// <auto-generated />
using System;
using Authorization.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Authorization.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190912164818_colorize-briefs")]
    partial class colorizebriefs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Authorization.Data.Entities.Brief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background");

                    b.Property<string>("Foreground");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Brief");
                });

            modelBuilder.Entity("Authorization.Data.Entities.Caveat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BriefId");

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<string>("Details");

                    b.HasKey("Id");

                    b.HasIndex("BriefId");

                    b.ToTable("Caveat");

                    b.HasDiscriminator<string>("Category").HasValue("Caveat");
                });

            modelBuilder.Entity("Authorization.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("OrgId");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Authorization.Data.Entities.Org", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Org");
                });

            modelBuilder.Entity("Authorization.Data.Entities.OrgUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrgId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("UserId");

                    b.ToTable("OrgUser");
                });

            modelBuilder.Entity("Authorization.Data.Entities.OrgUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrgUserId");

                    b.Property<int>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("OrgUserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("OrgUserRole");
                });

            modelBuilder.Entity("Authorization.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Authorization.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultOrgId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("Sidepanel");

                    b.Property<string>("SocketName");

                    b.Property<string>("Theme");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("DefaultOrgId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Authorization.Data.Entities.UserBrief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BriefId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BriefId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBrief");
                });

            modelBuilder.Entity("Authorization.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Authorization.Data.Entities.ItemCaveat", b =>
                {
                    b.HasBaseType("Authorization.Data.Entities.Caveat");

                    b.Property<int>("ItemId");

                    b.Property<string>("Name");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemCaveat");

                    b.HasDiscriminator().HasValue("ItemCaveat");
                });

            modelBuilder.Entity("Authorization.Data.Entities.Caveat", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Brief", "Brief")
                        .WithMany("Caveats")
                        .HasForeignKey("BriefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.Data.Entities.Item", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Org", "Org")
                        .WithMany("Items")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.Data.Entities.OrgUser", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Org", "Org")
                        .WithMany("OrgUsers")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Data.Entities.User", "User")
                        .WithMany("UserOrgs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.Data.Entities.OrgUserRole", b =>
                {
                    b.HasOne("Authorization.Data.Entities.OrgUser", "OrgUser")
                        .WithMany("OrgUserRoles")
                        .HasForeignKey("OrgUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Authorization.Data.Entities.UserRole", "UserRole")
                        .WithMany("OrgUserRoles")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Authorization.Data.Entities.User", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Org", "DefaultOrg")
                        .WithMany("OrgDefaultUsers")
                        .HasForeignKey("DefaultOrgId");
                });

            modelBuilder.Entity("Authorization.Data.Entities.UserBrief", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Brief", "Brief")
                        .WithMany("UserBriefs")
                        .HasForeignKey("BriefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Data.Entities.User", "User")
                        .WithMany("UserBriefs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Authorization.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Authorization.Data.Entities.ItemCaveat", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Item", "Item")
                        .WithMany("ItemCaveats")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
